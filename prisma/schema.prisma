generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model accounts {
  id           Int            @id @default(autoincrement())
  name         String         @db.VarChar(100)
  type         accounts_type? @default(cash)
  balance      Decimal?       @default(0.00) @db.Decimal(12, 2)
  user_id      Int
  users        users          @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "accounts_ibfk_1")
  transactions transactions[]

  @@index([user_id], map: "user_id")
}

model budgets {
  id          Int        @id @default(autoincrement())
  category_id Int
  user_id     Int
  month       Int        @db.Year
  month_num   Int        @db.TinyInt
  amount      Decimal    @db.Decimal(12, 2)
  created_at  DateTime?  @default(now()) @db.Timestamp(0)
  categories  categories @relation(fields: [category_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "budgets_ibfk_1")
  users       users      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "budgets_ibfk_2")

  @@index([category_id], map: "category_id")
  @@index([month, month_num], map: "idx_budgets_month")
  @@index([user_id], map: "user_id")
}

model categories {
  id               Int             @id @default(autoincrement())
  name             String          @db.VarChar(100)
  type             categories_type
  color            String?         @default("#000000") @db.VarChar(7)
  parent_id        Int?
  user_id          Int
  budgets          budgets[]
  categories       categories?     @relation("categoriesTocategories", fields: [parent_id], references: [id], onUpdate: Restrict, map: "categories_ibfk_1")
  other_categories categories[]    @relation("categoriesTocategories")
  users            users           @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "categories_ibfk_2")
  transactions     transactions[]

  @@index([parent_id], map: "parent_id")
  @@index([user_id], map: "user_id")
}

model transactions {
  id          Int               @id @default(autoincrement())
  account_id  Int
  category_id Int?
  type        transactions_type
  amount      Decimal           @db.Decimal(12, 2)
  date        DateTime          @db.Date
  notes       String?           @db.Text
  created_at  DateTime?         @default(now()) @db.Timestamp(0)
  updated_at  DateTime?         @default(now()) @db.Timestamp(0)
  accounts    accounts          @relation(fields: [account_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "transactions_ibfk_1")
  categories  categories?       @relation(fields: [category_id], references: [id], onUpdate: Restrict, map: "transactions_ibfk_2")

  @@index([account_id], map: "account_id")
  @@index([category_id], map: "idx_transactions_category")
  @@index([date], map: "idx_transactions_date")
}

model users {
  id            Int          @id @default(autoincrement())
  name          String       @db.VarChar(100)
  email         String?      @unique(map: "email") @db.VarChar(150)
  password_hash String?      @db.VarChar(255)
  created_at    DateTime?    @default(now()) @db.Timestamp(0)
  accounts      accounts[]
  budgets       budgets[]
  categories    categories[]
}

enum accounts_type {
  cash
  bank
  credit_card
  wallet
}

enum categories_type {
  income
  expense
}

enum transactions_type {
  income
  expense
}
